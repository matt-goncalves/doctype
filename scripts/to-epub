#!/usr/bin/env bash

# === Documentation === #
#
# This script uses my doctype standard, stylesheets, and bash automation to
# generate an epub file from a new document. It requires zip, xsltproc, xmllint,
# and basic unix tools to perform this task. Ideally, used with documents that
# have rich metadata fields.
#
# Saturday, July  5, 2025. 01:46 PM
#
# === === #

DTD="$HOME/.doctype/dtd/document.dtd"

STYLESHEETS="$HOME/.doctype/stylesheets"

TO_META="$STYLESHEETS/to-epub/to-metadata-modular.xsl"
TO_TOC="$STYLESHEETS/to-epub/to-toc.xsl"
TO_XHTMLCHAPTER="$STYLESHEETS/to-epub/sect-to-xhtml.xsl"
TO_TITLEPAGE="$STYLESHEETS/to-epub/to-coverpage.xsl"

MIMETYPE_TEXT="application/epub+zip"

OPF_TEXT=$(cat << EOF
<?xml version="1.0"?>
<container version="1.0" 
  xmlns="urn:oasis:names:tc:opendocument:xmlns:container">
  <rootfiles>
    <rootfile full-path="OEBPS/content.opf"
      media-type="application/oebps-package+xml"/>
  </rootfiles>
</container>
EOF
)

EPUB_CSS="$HOME/.doctype/css/ebook_styles.css"

to-epub()
{

  for file  in "$@"; do

    # Get output path to transfer the epub file (full path)
    outdir="$(realpath $(dirname "$file"))"

    # Validate before running
    xmllint --dtdvalid "$DTD" --noout "$file" || { echo "File ${file} is not valid." >&2 ; return 1; }

    # Extract title
    book_title=$(xmllint --xpath '//head/title/text()' "$file")

    # Temp dir to process it
    tempdir=$(mktemp -d)

    # Get number of sections
    count=$(xmllint --xpath 'count(//section)' "$file")

    # Convert sections from xml to xhtml, each as a standalone file
    {
      for i in $(seq 1 $count); do
        # Extract ith section as standalone XML (wrap with root element)
        xmllint --xpath "//section[$i]" "$file" > "$tempdir/_section_${i}.xml";

        # Transform section with xsltproc
        xsltproc "$TO_XHTMLCHAPTER" "$tempdir/_section_${i}.xml" > "$tempdir/section-${i}.xhtml";
      done
    } && echo "Source file converted into xhtml modules."

    # Generate TOC
    {
      xsltproc "$TO_TOC" "$file" > "$tempdir/toc.xhtml";

      # Generate metadata
      xsltproc "$TO_META" "$file" > "$tempdir/content.opf";

      # Generate coverpage
      xsltproc "$TO_TITLEPAGE" "$file" > "$tempdir"/title-page.xhtml
    } && echo "Generated complementary files."

    # Create book directory
    bookdir="${tempdir}/${book_title}"

    mkdir "$bookdir"

    # Create directory tree
    mkdir "$bookdir"/META-INF && echo 'creating temp folder META-INF'
    mkdir "$bookdir"/OEBPS && echo 'creating temp folder OEBPS'

    # Move files to the right places
    {
      mv "$tempdir"/*.xhtml "$bookdir"/OEBPS;
      mv "$tempdir/content.opf" "$bookdir"/OEBPS;
    } && echo "Chapters and content.opf added to OEBPS/"

    # Create CSS file
    {
      cat "$EPUB_CSS" >> "$bookdir"/OEBPS/styles.css;
    } && echo "CSS file added."

    # Create cover 
    {
      mkdir "$bookdir"/OEBPS/images;
      convert -size 1600x2560 canvas:gray "$bookdir"/OEBPS/images/cover.jpg;
    } && echo "Cover created."

    # Generate OPF container
    echo "$OPF_TEXT" > "$bookdir"/META-INF/container.xml

    # Compress file
    (
      cd "$bookdir" || { echo "Bookdir not found." >&2 ; return 1; }

      # Create mimetype file if missing, ensure no trailing newline
      echo -n "$MIMETYPE_TEXT" > mimetype

      # Step 1: Add mimetype uncompressed at start
      zip -X0 "${outdir}/${book_title}.epub" mimetype && echo "Mimetype file zipped."

      # Step 2: Add rest with compression
      zip -Xur9D "${outdir}/${book_title}.epub" META-INF OEBPS && echo "META-INF and OEBPS zipped."
    )
  done
}
